1.
    File: frameworks/base/core/java/android/os/IEvSafeService.aidl

2.
    Path: frameworks/base/core/java/com/android/server/EvSafeService.java

3.
    File: frameworks/base/core/java/android/app/EvSafeServiceManager.java

4.
    Modify:
    frameworks/base/services/java/com/android/server/SystemServer.java
    frameworks/base/core/java/android/app/SystemServiceRegistry.java
    frameworks/base/core/java/android/content/Context.java
    frameworks/base/Android.bp

5.
    Modify:
    AOSP/system/sepolicy/service_contexts
    AOSP/system/sepolicy/Service.te
    
6.
    build:
    source build/envsetup.sh
    lunch <build_variant>
    make update-api -j12


4-1.
    // SystemServer.java
    private void startOtherServices(){
        ...
        try{
            Slog.i(TAG, "***EvSafe Sevice***");
            ServiceManager.addService(Context.EVSAFE_SERVICE, new EvSafeSErvice());
        } catch (Throwable e){
            Slog.e(TAG, "Failure starting EvSafe Service", e);
        }
        ...
    }


4-2.
    //SystemServiceRegistry.java
    import android.os.IEvSafeService;
    ...

    final class SystemServiceRegistry{
        ....
        ....
        registerService(Context.EVSAFE_SERVICE, EvSafeServiceManager.class,
        new CachedServiceFetcher<EvSafeServiceManager>() {
            @Override
            public EvSafeServiceManager createService(ContextImpl ctx) {
                IBinder binder = ServiceManager.getService(Context.EVSAFE_SERVICE);
                IEvSafeService service = IEvSafeService.Stub.asInterface(binder);
                return new EvSafeServiceManager(ctx, service);
            }
        });
        ....
        ....
    }

    

4-3.
//Context.java           

    /**
    *@hide
    */
    public static final String EVSAFE_SERVICE = "evsafe"; 



4-4.
//Android.bp

// 위치 여기 맞는지 확인 필요
filegroup {
    name: "framework-non-updatable-sources",
    srcs: [
srcs: [
    ...
    ...
    "core/java/android/os/IEvSafeService.aidl"
    ...
    ...
]



5-1.
    // AOSP/system/sepolicy/service_contexts
    evsafe                      u:object_r:evsafe_service:s0


5-2.
    type evsafe_service, system_api_service, system_server_service, service_manager_type;




해당 오류는 **Android Open Source Project(AOSP)**를 빌드하는 도중 발생하는 Metalava 관련 에러입니다. 주요 원인은 srcjar 파일 내에서 동일한 파일(예: android/os/IEvSafeService.java)이 여러 번 정의되어 충돌이 발생하는 것입니다.
문제 원인

    aidl 컴파일 결과로 생성된 srcjar 파일 중에서 동일한 파일(android/os/IEvSafeService.java)이 aidl11.srcjar와 aidl31.srcjar에 중복 포함되어 있음.
    Metalava는 API 문서를 생성하거나 검증할 때 중복된 파일이 있으면 에러를 발생시킴.
    exit status 1은 이 문제로 인해 Metalava가 종료되었음을 의미함.

해결 방법

    중복된 파일 확인 중복된 파일(android/os/IEvSafeService.java)이 포함된 srcjar 파일의 내용을 확인하여 어떤 부분에서 중복이 발생했는지 확인하세요.

unzip -l ./out/.intermediates/frameworks/base/module-lib-api-stubs-docs-non-updatable/android_common/gen/aidl/aidl11.srcjar
unzip -l ./out/.intermediates/frameworks/base/module-lib-api-stubs-docs-non-updatable/android_common/gen/aidl/aidl31.srcjar

빌드 설정 수정 만약 동일 파일이 여러 개의 srcjar에 정의되어 있다면 다음 중 하나를 선택해야 합니다:

    필요 없는 파일을 하나의 srcjar에서 제외.
    build/soong이나 해당 AIDL 파일 경로의 Android.bp를 수정하여 중복 파일 생성을 방지.

Metalava에 파일 제외 처리 Metalava를 실행할 때, 특정 경로나 파일을 무시하도록 옵션을 추가할 수 있습니다. 예를 들어, --exclude-documentation-from-stubs나 --hide 옵션을 활용하여 문제 파일을 무시하도록 설정하세요.

빌드 캐시 정리 및 재시도 빌드 중간에 캐시 문제가 원인이 될 수 있으니 빌드 캐시를 정리한 뒤 다시 시도합니다.

    rm -rf out
    source build/envsetup.sh
    lunch <target>
    m clean && m

    최신 코드와 비교 AOSP의 최신 소스 코드를 가져와 동일한 문제가 이미 해결되었는지 확인하고, 변경 사항을 병합하는 것도 방법입니다.

추가 디버깅

위 방법으로도 해결되지 않는다면, 충돌을 유발하는 AIDL 파일의 경로나 의존 관계를 추적해야 합니다.

grep -r "IEvSafeService" frameworks/base

해당 파일이 포함된 모든 위치를 확인하고 필요 시 의존성 수정이 필요할 수 있습니다.
참고

Metalava 관련 설정은 build/soong 디렉터리에서 metalava 설정을 확인하거나 수정하여 영향 범위를 최소화할 수 있습니다.
